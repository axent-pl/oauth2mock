{
	"info": {
		"_postman_id": "0382c89e-d8b5-4907-98ac-83cc029c2837",
		"name": "OAuth2Mock",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "169649"
	},
	"item": [
		{
			"name": "errors",
			"item": [
				{
					"name": "Authorize (user:demo) - invalid scope",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"pm.test(\"Response text to have 'invalid scope'\", function () {",
									"    pm.expect(pm.response.text().toLowerCase()).to.have.string(\"invalid scope\");",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"followRedirects": false
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "",
									"value": "",
									"type": "text"
								},
								{
									"key": "username",
									"value": "demo",
									"type": "text"
								},
								{
									"key": "password",
									"value": "demo",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{SERVER_URL}}/authorize?response_type=code&client_id=ACME&redirect_uri={{REDIRECT_URL}}&scope=openid email profile products::read badscope&nonce={{AUTH_NONCE}}&state={{AUTH_STATE}}",
							"host": [
								"{{SERVER_URL}}"
							],
							"path": [
								"authorize"
							],
							"query": [
								{
									"key": "response_type",
									"value": "code"
								},
								{
									"key": "client_id",
									"value": "ACME"
								},
								{
									"key": "redirect_uri",
									"value": "{{REDIRECT_URL}}"
								},
								{
									"key": "scope",
									"value": "openid email profile products::read badscope"
								},
								{
									"key": "nonce",
									"value": "{{AUTH_NONCE}}"
								},
								{
									"key": "state",
									"value": "{{AUTH_STATE}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Authorize (user:demo) - invalid redirect_uri",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"pm.test(\"Response text to have 'invalid redirect_uri'\", function () {",
									"    pm.expect(pm.response.text().toLowerCase()).to.have.string(\"invalid redirect_uri\");",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"followRedirects": false
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "",
									"value": "",
									"type": "text"
								},
								{
									"key": "username",
									"value": "demo",
									"type": "text"
								},
								{
									"key": "password",
									"value": "demo",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{SERVER_URL}}/authorize?response_type=code&client_id=ACME&redirect_uri=http://wrong-redirect-url.com&scope=openid email profile products::read&nonce={{AUTH_NONCE}}&state={{AUTH_STATE}}",
							"host": [
								"{{SERVER_URL}}"
							],
							"path": [
								"authorize"
							],
							"query": [
								{
									"key": "response_type",
									"value": "code"
								},
								{
									"key": "client_id",
									"value": "ACME"
								},
								{
									"key": "redirect_uri",
									"value": "http://wrong-redirect-url.com"
								},
								{
									"key": "scope",
									"value": "openid email profile products::read"
								},
								{
									"key": "nonce",
									"value": "{{AUTH_NONCE}}"
								},
								{
									"key": "state",
									"value": "{{AUTH_STATE}}"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Authorize (user:demo)",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Location is present\", function () {",
							"    pm.response.to.have.header(\"Location\");",
							"});",
							"",
							"pm.test(\"Location header contains 'code' query parameter\", function () {",
							"    let locationHeader = pm.response.headers.get(\"Location\");",
							"    let codeMatch = locationHeader.match(/[?&]code=([^&]+)/);",
							"    pm.expect(codeMatch).to.not.be.null;",
							"    if (codeMatch) {",
							"        let code = codeMatch[1]; ",
							"        pm.collectionVariables.set(\"AUTHORIZATION_CODE\", code);",
							"        console.log(\"Saved code:\", code);",
							"    }",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"protocolProfileBehavior": {
				"followRedirects": false
			},
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "",
							"value": "",
							"type": "text"
						},
						{
							"key": "username",
							"value": "demo",
							"type": "text"
						},
						{
							"key": "password",
							"value": "demo",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{SERVER_URL}}/authorize?response_type=code&client_id=ACME&redirect_uri={{REDIRECT_URL}}&scope=openid email profile products::read&nonce={{AUTH_NONCE}}&state={{AUTH_STATE}}",
					"host": [
						"{{SERVER_URL}}"
					],
					"path": [
						"authorize"
					],
					"query": [
						{
							"key": "response_type",
							"value": "code"
						},
						{
							"key": "client_id",
							"value": "ACME"
						},
						{
							"key": "redirect_uri",
							"value": "{{REDIRECT_URL}}"
						},
						{
							"key": "scope",
							"value": "openid email profile products::read"
						},
						{
							"key": "nonce",
							"value": "{{AUTH_NONCE}}"
						},
						{
							"key": "state",
							"value": "{{AUTH_STATE}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Token (user:demo authorization_code)",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"",
							"var atob = require('atob');",
							"",
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"pm.test(\"Payload has `token_type`\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData).to.have.property(\"token_type\")",
							"});",
							"pm.test(\"Payload has `access_token`\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData).to.have.property(\"access_token\")",
							"    pm.collectionVariables.set(\"ACCESS_TOKEN\", jsonData.access_token);",
							"});",
							"pm.test(\"Payload has `refresh_token`\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData).to.have.property(\"refresh_token\");",
							"    pm.collectionVariables.set(\"REFRESH_TOKEN\", jsonData.refresh_token);",
							"});",
							"pm.test(\"Payload `token_type` is `Bearer` \", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.token_type).to.eql(\"Bearer\");",
							"});",
							"// access_token claims",
							"pm.test(\"`access_token` has `iss` claim\", function () {",
							"    var jsonData = pm.response.json();",
							"    let jwt = jsonData.access_token",
							"    let [jwtHeader, jwtPayload, jwtSignature] = jwt.split('.')",
							"    let jwtPayloadJsonString = atob(jwtPayload)",
							"    let jwtPayloadJson = JSON.parse(jwtPayloadJsonString)",
							"    pm.expect(jwtPayloadJson).to.have.property(\"iss\")",
							"});",
							"pm.test(\"`access_token` has `exp` claim\", function () {",
							"    var jsonData = pm.response.json();",
							"    let jwt = jsonData.access_token",
							"    let [jwtHeader, jwtPayload, jwtSignature] = jwt.split('.')",
							"    let jwtPayloadJsonString = atob(jwtPayload)",
							"    let jwtPayloadJson = JSON.parse(jwtPayloadJsonString)",
							"    pm.expect(jwtPayloadJson).to.have.property(\"exp\")",
							"});",
							"pm.test(\"`access_token` has `nonce` claim\", function () {",
							"    var jsonData = pm.response.json();",
							"    let jwt = jsonData.access_token",
							"    let [jwtHeader, jwtPayload, jwtSignature] = jwt.split('.')",
							"    let jwtPayloadJsonString = atob(jwtPayload)",
							"    let jwtPayloadJson = JSON.parse(jwtPayloadJsonString)",
							"    pm.expect(jwtPayloadJson).to.have.property(\"nonce\")",
							"});",
							"// additional claims from scopes",
							"pm.test(\"`access_token` has `email` claim\", function () {",
							"    var jsonData = pm.response.json();",
							"    let jwt = jsonData.access_token",
							"    let [jwtHeader, jwtPayload, jwtSignature] = jwt.split('.')",
							"    let jwtPayloadJsonString = atob(jwtPayload)",
							"    let jwtPayloadJson = JSON.parse(jwtPayloadJsonString)",
							"    pm.expect(jwtPayloadJson).to.have.property(\"email\")",
							"});",
							"pm.test(\"`access_token` does not have `products` claim\", function () {",
							"    var jsonData = pm.response.json();",
							"    let jwt = jsonData.access_token",
							"    let [jwtHeader, jwtPayload, jwtSignature] = jwt.split('.')",
							"    let jwtPayloadJsonString = atob(jwtPayload)",
							"    let jwtPayloadJson = JSON.parse(jwtPayloadJsonString)",
							"    pm.expect(jwtPayloadJson).to.not.have.property(\"products\")",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "",
							"value": "",
							"type": "text"
						},
						{
							"key": "grant_type",
							"value": "authorization_code",
							"type": "text"
						},
						{
							"key": "client_id",
							"value": "ACME",
							"type": "text"
						},
						{
							"key": "client_secret",
							"value": "acme-secret",
							"type": "text"
						},
						{
							"key": "code",
							"value": "{{AUTHORIZATION_CODE}}",
							"type": "text"
						},
						{
							"key": "redirect_uri",
							"value": "{{REDIRECT_URL}}",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{SERVER_URL}}/token",
					"host": [
						"{{SERVER_URL}}"
					],
					"path": [
						"token"
					]
				}
			},
			"response": []
		},
		{
			"name": "userinfo",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{ACCESS_TOKEN}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{SERVER_URL}}/userinfo",
					"host": [
						"{{SERVER_URL}}"
					],
					"path": [
						"userinfo"
					]
				}
			},
			"response": []
		},
		{
			"name": "Token (client_credentials)",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var atob = require('atob');",
							"",
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"pm.test(\"Payload has `token_type`\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData).to.have.property(\"token_type\")",
							"});",
							"pm.test(\"Payload has `access_token`\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData).to.have.property(\"access_token\")",
							"});",
							"pm.test(\"Payload has `refresh_token`\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData).to.have.property(\"refresh_token\")",
							"});",
							"pm.test(\"Payload `token_type` is `Bearer` \", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.token_type).to.eql(\"Bearer\");",
							"});",
							"// access_token claims",
							"pm.test(\"`access_token` has `iss` claim\", function () {",
							"    var jsonData = pm.response.json();",
							"    let jwt = jsonData.access_token",
							"    let [jwtHeader, jwtPayload, jwtSignature] = jwt.split('.')",
							"    let jwtPayloadJsonString = atob(jwtPayload)",
							"    let jwtPayloadJson = JSON.parse(jwtPayloadJsonString)",
							"    pm.expect(jwtPayloadJson).to.have.property(\"iss\")",
							"});",
							"pm.test(\"`access_token` has `exp` claim\", function () {",
							"    var jsonData = pm.response.json();",
							"    let jwt = jsonData.access_token",
							"    let [jwtHeader, jwtPayload, jwtSignature] = jwt.split('.')",
							"    let jwtPayloadJsonString = atob(jwtPayload)",
							"    let jwtPayloadJson = JSON.parse(jwtPayloadJsonString)",
							"    pm.expect(jwtPayloadJson).to.have.property(\"exp\")",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "",
							"value": "",
							"type": "text"
						},
						{
							"key": "grant_type",
							"value": "client_credentials",
							"type": "text"
						},
						{
							"key": "client_id",
							"value": "ACME",
							"type": "text"
						},
						{
							"key": "client_secret",
							"value": "acme-secret",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{SERVER_URL}}/token",
					"host": [
						"{{SERVER_URL}}"
					],
					"path": [
						"token"
					]
				}
			},
			"response": []
		},
		{
			"name": "Token (password)",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"pm.test(\"Payload has `token_type`\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData).to.have.property(\"token_type\")",
							"});",
							"pm.test(\"Payload has `access_token`\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData).to.have.property(\"access_token\")",
							"});",
							"pm.test(\"Payload has `refresh_token`\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData).to.have.property(\"refresh_token\")",
							"});",
							"pm.test(\"Payload `token_type` is `Bearer` \", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.token_type).to.eql(\"Bearer\");",
							"});",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "",
							"value": "",
							"type": "text"
						},
						{
							"key": "grant_type",
							"value": "password",
							"type": "text"
						},
						{
							"key": "client_id",
							"value": "ACME",
							"type": "text"
						},
						{
							"key": "client_secret",
							"value": "acme-secret",
							"type": "text"
						},
						{
							"key": "username",
							"value": "demo",
							"type": "text"
						},
						{
							"key": "password",
							"value": "demo",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{SERVER_URL}}/token",
					"host": [
						"{{SERVER_URL}}"
					],
					"path": [
						"token"
					]
				}
			},
			"response": []
		},
		{
			"name": "SCIM Create",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 201\", function () {",
							"    pm.response.to.have.status(201);",
							"});",
							"",
							"pm.test(\"User userName same as posted\", function () {",
							"    var jsonData = pm.response.json();",
							"    var userName = pm.collectionVariables.get(\"USER1_USERNAME\")",
							"    pm.expect(jsonData.userName).to.eql(userName);",
							"});",
							"",
							"pm.test(\"User is active\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.active).to.eql(true);",
							"});",
							"",
							"pm.test(\"User has custom attribute\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData['urn:example:params:scim:schemas:extension:custom:2.0:User']['favoriteColor']).to.eql(\"blue\");",
							"});",
							"",
							"pm.test(\"User has enterprise attribute\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData['urn:ietf:params:scim:schemas:extension:enterprise:2.0:User']['department']).to.eql(\"IT\");",
							"});",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"const newUserName = `user_${Math.floor(Math.random() * 1000000)}`;",
							"const newUserPass = \"pass_\"+newUserName.substr(5);",
							"pm.collectionVariables.set(\"USER1_USERNAME\", newUserName);",
							"pm.collectionVariables.set(\"USER1_PASSWORD\", newUserPass);"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"protocolProfileBehavior": {
				"followRedirects": false
			},
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"schemas\": [\n    \"urn:ietf:params:scim:schemas:core:2.0:User\",\n    \"urn:ietf:params:scim:schemas:extension:enterprise:2.0:User\",\n    \"urn:example:params:scim:schemas:extension:custom:2.0:User\"\n  ],\n  \"userName\": \"{{USER1_USERNAME}}\",\n  \"password\": \"{{USER1_PASSWORD}}\",\n  \"urn:ietf:params:scim:schemas:extension:enterprise:2.0:User\": {\n    \"employeeNumber\": \"12345\",\n    \"department\": \"IT\"\n  },\n  \"urn:example:params:scim:schemas:extension:custom:2.0:User\": {\n    \"favoriteColor\": \"blue\",\n    \"projectCodes\": [\"X1\", \"Y2\"]\n  }\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{SERVER_URL}}/beta/scim/users",
					"host": [
						"{{SERVER_URL}}"
					],
					"path": [
						"beta",
						"scim",
						"users"
					]
				}
			},
			"response": []
		},
		{
			"name": "Authorize (user:demo, expected auth from session)",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Location is present\", function () {",
							"    pm.response.to.have.header(\"Location\");",
							"});",
							"",
							"pm.test(\"Location header contains 'code' query parameter\", function () {",
							"    let locationHeader = pm.response.headers.get(\"Location\");",
							"    let codeMatch = locationHeader.match(/[?&]code=([^&]+)/);",
							"    pm.expect(codeMatch).to.not.be.null;",
							"    if (codeMatch) {",
							"        let code = codeMatch[1]; ",
							"        pm.collectionVariables.set(\"AUTHORIZATION_CODE\", code);",
							"        console.log(\"Saved code:\", code);",
							"    }",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"protocolProfileBehavior": {
				"followRedirects": false
			},
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{SERVER_URL}}/authorize?response_type=code&client_id=ACME&redirect_uri={{REDIRECT_URL}}&scope=email profile products::read&nonce={{AUTH_NONCE}}&state={{AUTH_STATE}}",
					"host": [
						"{{SERVER_URL}}"
					],
					"path": [
						"authorize"
					],
					"query": [
						{
							"key": "response_type",
							"value": "code"
						},
						{
							"key": "client_id",
							"value": "ACME"
						},
						{
							"key": "redirect_uri",
							"value": "{{REDIRECT_URL}}"
						},
						{
							"key": "scope",
							"value": "email profile products::read"
						},
						{
							"key": "nonce",
							"value": "{{AUTH_NONCE}}"
						},
						{
							"key": "state",
							"value": "{{AUTH_STATE}}"
						}
					]
				}
			},
			"response": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "AUTHORIZATION_CODE",
			"value": "-"
		},
		{
			"key": "REDIRECT_URL",
			"value": "http://localhost:8080",
			"type": "string"
		},
		{
			"key": "USER1_USERNAME",
			"value": ""
		},
		{
			"key": "USER1_PASSWORD",
			"value": ""
		},
		{
			"key": "SERVER_URL",
			"value": "http://localhost:8222",
			"type": "string"
		},
		{
			"key": "AUTH_NONCE",
			"value": "my-nonce",
			"type": "string"
		},
		{
			"key": "AUTH_STATE",
			"value": "my-state",
			"type": "string"
		},
		{
			"key": "ACCESS_TOKEN",
			"value": "xxx"
		},
		{
			"key": "REFRESH_TOKEN",
			"value": "xxx"
		}
	]
}